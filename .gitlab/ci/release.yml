---
stages:
  - preparation
  - release

create_release_branch:
  stage: preparation

# The Release Job is triggered manually.
# This happens in the Gitlab CI pipeline web UI.
# The job can only be triggered if a Semantic Version Tag was pushed.
# For more info on Semantic Versioning, see: https://semver.org/
release_job:
  stage: release
  image: "registry.gitlab.com/gitlab-org/release-cli:latest"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - 'echo "Running release job for: ${$CI_COMMIT_TAG}"'
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: 'Release created using the release-cli.'
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: "build_theme"
    - pipeline: $PARENT_PIPELINE_ID
      job: "build_jar"


# TODO: 1. A release branch is created, e.g. release-${COMMITHASH};
# TODO: 2. A git version tag (e.g. v1.2.3) is created;
# TODO: 3. The pom.xml version is updated, using mvn versions:set -DnewVersion=1.2.3;
# TODO: 4. The changes are committed and pushed to the release branch;
# TODO: 5. The release branch is merged into the main branch;
# TODO: 6. A generic release package is created from the merge into main;
# TODO: 7. This release package is uploaded to this repo's Package Registry.
# TODO: 8. The release branch is deleted;
# TODO: 9. main is merged into develop again to have the same version numbers everywhere.
